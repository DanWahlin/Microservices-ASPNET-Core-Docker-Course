{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/core/data.service.ts","webpack:///./src/app/customers/customers.component.html","webpack:///./src/app/customers/customers.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { CustomersComponent }     from './customers/customers.component';\n\nconst routes: Routes = [\n  { path: '',  pathMatch:'full', redirectTo: '/customers' },\n  { path: 'customers', component: CustomersComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<router-outlet></router-outlet>\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'customers-app';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { CustomersComponent } from './customers/customers.component';\n\n@NgModule({\n  declarations: [\n    AppComponent, CustomersComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule, ReactiveFormsModule, HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\nimport { ICustomer } from '../shared/interfaces';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class DataService {\n    \n    private url: string = 'api/customersservice/customers/';\n    \n    constructor(private http: HttpClient) { }\n    \n    getCustomersSummary() : Observable<ICustomer[]> {\n        return this.http.get<ICustomer[]>(this.url)\n            .pipe(\n                catchError(this.handleError)\n            );\n    }\n    \n    updateCustomer(customer: ICustomer) {       \n      return this.http.put(this.url + customer.id, customer)\n                .pipe(\n                    catchError(this.handleError)\n                );\n    }\n    \n    handleError(error: any) {\n        console.error(error);\n        return Observable.throw(error.json().error || 'Server error');\n    }\n    \n}\n","module.exports = \"<h1>Customers</h1>\\n<br />\\n\\n<!-- Added navbar to switch between list view shown in video and new edit view -->\\n<div class=\\\"navbar\\\">\\n    <ul class=\\\"nav navbar-nav\\\">\\n        <li class=\\\"toolbar-item\\\">\\n            <a (click)=\\\"editViewEnabled=false\\\" [class.active]=\\\"!editViewEnabled\\\">\\n                <span class=\\\"glyphicon glyphicon-align-justify\\\"></span> List View\\n            </a>\\n        </li>\\n        <li class=\\\"toolbar-item\\\">\\n            <a (click)=\\\"editViewEnabled=true\\\" [class.active]=\\\"editViewEnabled\\\">\\n                <span class=\\\"glyphicon glyphicon-pencil\\\"></span> Edit View\\n            </a>\\n        </li>\\n    </ul>\\n</div>\\n\\n<div *ngIf=\\\"!editViewEnabled\\\">\\n    <div class=\\\"row header-row\\\">\\n        <div class=\\\"col-md-2\\\">\\n            Name\\n        </div>\\n        <div class=\\\"col-md-4\\\">\\n            Email\\n        </div>\\n        <div class=\\\"col-md-4\\\">\\n            Address\\n        </div>\\n        <div class=\\\"col-md-2\\\">\\n            City\\n        </div>\\n    </div>\\n    <div class=\\\"row\\\" *ngFor=\\\"let customer of customers\\\">\\n        <div class=\\\"col-md-2\\\">\\n            {{ customer.firstName  }} {{ customer.lastName }} \\n        </div>\\n        <div class=\\\"col-md-4\\\">\\n            {{ customer.email }}\\n        </div>\\n        <div class=\\\"col-md-4\\\">\\n            {{ customer.address }}\\n        </div>\\n        <div class=\\\"col-md-2\\\">\\n            {{ customer.city }}\\n        </div>\\n        <br />\\n    </div>\\n</div>\\n\\n<!-- Added editable list to demonstrate doing an HTTP PUT -->\\n<div *ngIf=\\\"editViewEnabled\\\">\\n    <div class=\\\"container\\\" *ngFor=\\\"let customer of customers\\\">\\n        <div class=\\\"row\\\" *ngIf=\\\"editId !== customer.id\\\">\\n            <div class=\\\"col-md-4\\\">\\n            {{ customer.firstName  }} {{ customer.lastName }} \\n            </div>\\n            <div class=\\\"col-md-8\\\">\\n                <span class=\\\"btn btn-success pull-left\\\" \\n                    (click)=\\\"editId=customer.id\\\">Edit</span>\\n            </div>\\n        </div>\\n        <div *ngIf=\\\"editId == customer.id\\\">\\n            <h4>{{ customer.firstName  }} {{ customer.lastName }}</h4>\\n            <br />\\n            <form (ngSubmit)=\\\"save(customer)\\\" #customerForm=\\\"ngForm\\\">\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"name\\\">First Name</label>\\n                    <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"firstName\\\" #firstName=\\\"ngModel\\\" [(ngModel)]=\\\"customer.firstName\\\" required>\\n                    <div class=\\\"alert alert-danger\\\" [hidden]=\\\"firstName.valid\\\">First Name is required</div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"name\\\">Last Name</label>\\n                    <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"lastName\\\" #lastName=\\\"ngModel\\\" [(ngModel)]=\\\"customer.lastName\\\" required>\\n                    <div class=\\\"alert alert-danger\\\" [hidden]=\\\"lastName.valid\\\">Last Name is required</div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"name\\\">Email</label>\\n                    <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"email\\\" #email=\\\"ngModel\\\" [(ngModel)]=\\\"customer.email\\\" required>\\n                    <div class=\\\"alert alert-danger\\\" [hidden]=\\\"email.valid\\\">Email is required</div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"name\\\">City</label>\\n                    <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"city\\\" #city=\\\"ngModel\\\" [(ngModel)]=\\\"customer.city\\\" required>\\n                    <div class=\\\"alert alert-danger\\\" [hidden]=\\\"city.valid\\\">City is required</div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"name\\\">Address</label>\\n                    <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"address\\\" #address=\\\"ngModel\\\" [(ngModel)]=\\\"customer.address\\\" required>\\n                    <div class=\\\"alert alert-danger\\\" [hidden]=\\\"address.valid\\\">Address is required</div>\\n                </div>\\n                <button type=\\\"submit\\\" class=\\\"btn btn-success\\\" [disabled]=\\\"!customerForm.valid\\\">Submit</button>&nbsp;\\n                <span type=\\\"button\\\" class=\\\"btn btn-default\\\" (click)=\\\"editId=0\\\">Cancel</span>\\n            </form>\\n        </div>\\n        <br />\\n    </div>\\n\\n    <span class=\\\"alert alert-danger\\\" [hidden]=\\\"!errorMessage\\\">{{ errorMessage }}</span>\\n</div>\"","import { Component, OnInit } from '@angular/core';\n\nimport { DataService } from '../core/data.service';\nimport { ICustomer } from '../shared/interfaces';\n\n@Component({\n    selector: 'app-customers',\n    templateUrl: 'customers.component.html'\n})\nexport class CustomersComponent implements OnInit {\n    \n    customers: ICustomer[] = [];\n    editId: number = 0;\n    errorMessage: string;\n\n    constructor(private dataService: DataService) {  }\n\n    ngOnInit() { \n        this.dataService.getCustomersSummary()\n            .subscribe((data: ICustomer[]) => this.customers = data);\n    }\n    \n    save(customer: ICustomer) {\n        this.dataService.updateCustomer(customer)\n            .subscribe((status: boolean) => {\n                if (status) {\n                    this.editId = 0;\n                } else {\n                    this.errorMessage = 'Unable to save customer';\n                }\n            })\n    }\n\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}